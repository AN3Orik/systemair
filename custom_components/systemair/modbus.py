"""Modbus parameters for Systemair ventilation units."""

from dataclasses import dataclass
from enum import Enum


class IntegerType(Enum):
    """

    Enum class representing integer types for Modbus communication.

    Attributes
    ----------
        UINT (str): Unsigned integer type.
        INT (str): Signed integer type.

    """

    UINT = "UINT"
    INT = "INT"


class RegisterType(Enum):
    """

    Enum class representing the types of Modbus registers.

    Attributes
    ----------
        Input (str): Represents an input register.
        Holding (str): Represents a holding register.

    """

    Input = "Input"
    Holding = "Holding"


@dataclass(kw_only=True, frozen=True)
class ModbusParameter:
    """Describes a modbus register for Systemair."""

    register: int
    sig: IntegerType
    reg_type: RegisterType
    short: str
    description: str
    min_value: int | None = None
    max_value: int | None = None
    boolean: bool | None = None
    scale_factor: int | None = None
    combine_with_32_bit: int | None = None


parameters_list = [
    # Demand control
    ModbusParameter(
        register=1001,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_DEMC_RH_HIGHEST",
        description="Highest value of all RH sensors",
        min_value=0,
        max_value=100,
    ),
    ModbusParameter(
        register=1002,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_DEMC_CO2_HIGHEST",
        description="Highest CO2 value among all sensors, ppm.",
        min_value=0,
        max_value=2000,
    ),
    ModbusParameter(
        register=1003,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_DEMC_FAN_SPEED",
        description="Supply air fan speed by demand control function.",
        min_value=0,
        max_value=65536,
    ),
    ModbusParameter(
        register=1004,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_DEMC_ACTIVE_CONTROLLER",
        description="Sensor type by which demand control function is operating: 0: CO2, 1: RH",
        min_value=0,
        max_value=1,
    ),
    ModbusParameter(
        register=1007,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_DEMC_FAN_SPEED_EAF",
        description="Extract air fan speed by demand control function.",
        min_value=0,
        max_value=65536,
    ),
    ModbusParameter(
        register=1031,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_DEMC_RH_SETTINGS_PBAND",
        description="Demand control by RH P-band setting value, %.",
        min_value=1,
        max_value=100,
    ),
    ModbusParameter(
        register=1032,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_DEMC_RH_SETTINGS_ITIME",
        description="Demand control by RH I-time setting value, s.",
        min_value=0,
        max_value=120,
    ),
    ModbusParameter(
        register=1033,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_DEMC_RH_SETTINGS_SP_SUMMER",
        description="Summer relative humidity setpoint, %.",
        min_value=10,
        max_value=100,
    ),
    ModbusParameter(
        register=1034,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_DEMC_RH_SETTINGS_SP_WINTER",
        description="Winter relative humidity setpoint, %.",
        min_value=10,
        max_value=100,
    ),
    ModbusParameter(
        register=1035,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_DEMC_RH_SETTINGS_ON_OFF",
        description="Activation of demand control by relative humidity: 0: Disabled, 1: Enabled",
        boolean=True,
    ),
    ModbusParameter(
        register=1036,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SUMMER_WINTER_RESTART_COUNTER_L",
        description="Demand control summer mode counter. Time till summer mode becomes active, lower 16 bits.",
        combine_with_32_bit=1037,
    ),
    ModbusParameter(
        register=1037,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SUMMER_WINTER_RESTART_COUNTER_H",
        description="Demand control summer mode counter. Time till summer mode becomes active, higher 16 bits.",
        combine_with_32_bit=1036,
    ),
    ModbusParameter(
        register=1038,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SUMMER_WINTER_STATE",
        description="Demand control mode by season: 0: Summer, 1: Winter, 2: Identifying",
        min_value=0,
        max_value=2,
    ),
    ModbusParameter(
        register=1041,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_DEMC_CO2_SETTINGS_PBAND",
        description="Demand control by CO2 P-band setting value, %.",
        min_value=50,
        max_value=2000,
    ),
    ModbusParameter(
        register=1042,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_DEMC_CO2_SETTINGS_ITIME",
        description="Demand control by CO2 I-time setting value, s.",
        min_value=0,
        max_value=120,
    ),
    ModbusParameter(
        register=1043,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_DEMC_CO2_SETTINGS_SP",
        description="CO2 setpoint, %.",
        min_value=100,
        max_value=2000,
    ),
    ModbusParameter(
        register=1044,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_DEMC_CO2_SETTINGS_ON_OFF",
        description="Activation of demand control by CO2: 0: Disabled, 1: Enabled",
        boolean=True,
    ),
    ModbusParameter(
        register=1061,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_DEMC_ENABLED",
        description="Status of demand control: 0: Disabled, 1: Enabled",
        boolean=True,
    ),
    ModbusParameter(
        register=1062,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_DEMC_AUTO_MODE_SOURCE",
        description="Auto mode type: 0: External control, 1: Demand control, 2: Week schedule, 3: Configuration fault",
        min_value=0,
        max_value=3,
    ),
    # User modes
    ModbusParameter(
        register=1101,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_HOLIDAY_TIME",
        description="Time delay setting for user mode Holiday (days)",
        min_value=1,
        max_value=365,
    ),
    ModbusParameter(
        register=1102,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_AWAY_TIME",
        description="Time delay setting for user mode Away (hours)",
        min_value=1,
        max_value=72,
    ),
    ModbusParameter(
        register=1103,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_FIREPLACE_TIME",
        description="Time delay setting for user mode Fire Place (minutes)",
        min_value=1,
        max_value=60,
    ),
    ModbusParameter(
        register=1104,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_REFRESH_TIME",
        description="Time delay setting for user mode Refresh (minutes)",
        min_value=1,
        max_value=240,
    ),
    ModbusParameter(
        register=1105,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_CROWDED_TIME",
        description="Time delay setting for user mode Crowded (hours)",
        min_value=1,
        max_value=8,
    ),
    ModbusParameter(
        register=1111,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_USERMODE_REMAINING_TIME_L",
        description="Remaining time for the state Holiday/Away/Fire Place/Refresh/Crowded, lower 16 bits",
        combine_with_32_bit=1112,
    ),
    ModbusParameter(
        register=1112,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_USERMODE_REMAINING_TIME_H",
        description="Remaining time for the state Holiday/Away/Fire Place/Refresh/Crowded, higher 16 bits",
        combine_with_32_bit=1111,
    ),
    ModbusParameter(
        register=1121,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_IAQ_SPEED_LEVEL_MIN",
        description="Minimum fan speed for demand control function: 2: Low, 3: Normal",
        min_value=2,
        max_value=3,
    ),
    ModbusParameter(
        register=1122,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_IAQ_SPEED_LEVEL_MAX",
        description="Maximum fan speed for demand control function: 3: Normal, 4: High, 5: Maximum",
        min_value=3,
        max_value=5,
    ),
    ModbusParameter(
        register=1123,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_IAQ_LEVEL",
        description="Indoor air quality: 0: Perfect, 1: Good, 2: Improving",
        min_value=0,
        max_value=2,
    ),
    ModbusParameter(
        register=1131,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_MANUAL_AIRFLOW_LEVEL_SAF",
        description=(
            "Fan speed level for mode Manual. Applies to both the SAF and the EAF fan.\n0: Off(1)\n2: Low\n3: Normal\n"
            "4: High\n(1): value Off only allowed if contents of register REG_FAN_MANUAL_STOP_ALLOWED is 1."
        ),
        min_value=0,
        max_value=4,
    ),
    ModbusParameter(
        register=1135,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_CROWDED_AIRFLOW_LEVEL_SAF",
        description="Fan speed level for mode Crowded.\n3: Normal\n4: High\n5: Maximum",
        min_value=3,
        max_value=5,
    ),
    ModbusParameter(
        register=1136,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_CROWDED_AIRFLOW_LEVEL_EAF",
        description="Fan speed level for mode Crowded.\n3: Normal\n4: High\n5: Maximum",
        min_value=3,
        max_value=5,
    ),
    ModbusParameter(
        register=1137,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_REFRESH_AIRFLOW_LEVEL_SAF",
        description="Fan speed level for mode Refresh.\n3: Normal\n4: High\n5: Maximum",
        min_value=3,
        max_value=5,
    ),
    ModbusParameter(
        register=1138,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_REFRESH_AIRFLOW_LEVEL_EAF",
        description="Fan speed level for mode Refresh.\n3: Normal\n4: High\n5: Maximum",
        min_value=3,
        max_value=5,
    ),
    ModbusParameter(
        register=1139,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_FIREPLACE_AIRFLOW_LEVEL_SAF",
        description="Fan speed level for mode Fireplace.\n3: Normal\n4: High\n5: Maximum",
        min_value=3,
        max_value=5,
    ),
    ModbusParameter(
        register=1140,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_FIREPLACE_AIRFLOW_LEVEL_EAF",
        description="Fan speed level for mode Fireplace.\n1: Minimum\n2: Low\n3: Normal",
        min_value=1,
        max_value=3,
    ),
    ModbusParameter(
        register=1141,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_AWAY_AIRFLOW_LEVEL_SAF",
        description=(
            "Fan speed level for mode Away.\n0: Off(1)\n1: Minimum\n2: Low\n3: Normal.\n"
            "(1): value Off only allowed if contents of register REG_FAN_MANUAL_STOP_ALLOWED is 1."
        ),
        min_value=0,
        max_value=3,
    ),
    ModbusParameter(
        register=1142,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_AWAY_AIRFLOW_LEVEL_EAF",
        description=(
            "Fan speed level for mode Away.\n0: Off(1)\n1: Minimum\n2: Low\n3: Normal.\n"
            "(1): value Off only allowed if contents of register REG_FAN_MANUAL_STOP_ALLOWED is 1."
        ),
        min_value=0,
        max_value=3,
    ),
    ModbusParameter(
        register=1143,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_HOLIDAY_AIRFLOW_LEVEL_SAF",
        description=(
            "Fan speed level for mode Holiday.\n0: Off(1)\n1: Minimum\n2: Low\n3: Normal.\n(1): value"
            "Off only allowed if contents of register REG_FAN_MANUAL_STOP_ALLOWED is 1."
        ),
        min_value=0,
        max_value=3,
    ),
    ModbusParameter(
        register=1144,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_HOLIDAY_AIRFLOW_LEVEL_EAF",
        description=(
            "Fan speed level for mode Holiday.\n0: Off(1)\n1: Minimum\n2: Low\n3: Normal.\n(1): value"
            "Off only allowed if contents of register REG_FAN_MANUAL_STOP_ALLOWED is 1."
        ),
        min_value=0,
        max_value=3,
    ),
    ModbusParameter(
        register=1145,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_COOKERHOOD_AIRFLOW_LEVEL_SAF",
        description="Fan speed level for mode Cooker Hood.\n1: Minimum\n2: Low\n3: Normal\n4: High\n5: Maximum",
        min_value=1,
        max_value=5,
    ),
    ModbusParameter(
        register=1146,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_COOKERHOOD_AIRFLOW_LEVEL_EAF",
        description="Fan speed level for mode Cooker Hood.\n1: Minimum\n2: Low\n3: Normal\n4: High\n5: Maximum",
        min_value=1,
        max_value=5,
    ),
    ModbusParameter(
        register=1147,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_VACUUMCLEANER_AIRFLOW_LEVEL_SAF",
        description="Fan speed level for mode Vacuum Cleaner.\n1: Minimum\n2: Low\n3: Normal\n4: High\n5: Maximum",
        min_value=1,
        max_value=5,
    ),
    ModbusParameter(
        register=1148,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_VACUUMCLEANER_AIRFLOW_LEVEL_EAF",
        description="Fan speed level for mode Vacuum Cleaner.\n1: Minimum\n2: Low\n3: Normal\n4: High\n5: Maximum",
        min_value=1,
        max_value=5,
    ),
    ModbusParameter(
        register=1151,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_CROWDED_T_OFFSET",
        description="Supply air temperature decrease during Crowded user mode.",
        min_value=0,
        max_value=65436,
    ),
    ModbusParameter(
        register=1161,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_USERMODE_MODE",
        description=(
            "Active User mode.\n0: Auto\n1: Manual\n2: Crowded\n3: Refresh\n4: Fireplace\n5: Away\n6: Holiday\n"
            "7: Cooker Hood\n8: Vacuum Cleaner\n9: CDI1\n10: CDI2\n11: CDI3\n12: PressureGuard"
        ),
        min_value=0,
        max_value=12,
    ),
    ModbusParameter(
        register=1162,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_HMI_CHANGE_REQUEST",
        description=(
            "New desired user mode as requested by HMI\n1: Auto\n2: Manual\n3: Crowded\n4: Refresh\n5: Fireplace\n6: Away\n7: Holiday"
        ),
        min_value=1,
        max_value=7,
    ),
    ModbusParameter(
        register=1164,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_FALLBACK",
        description="Used mode in which SAVE unit should operate when user mode delay is expired: 0: Auto, 1: Manual",
        min_value=0,
        max_value=1,
    ),
    ModbusParameter(
        register=1171,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_CDI_1_AIRFLOW_LEVEL_SAF",
        description="Supply fan speed for configurable digital input 1 mode.\n0: Off\n1: Minimum\n2: Low\n3: Normal\n4: High\n5: Maximum",
        min_value=0,
        max_value=5,
    ),
    ModbusParameter(
        register=1172,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_CDI_1_AIRFLOW_LEVEL_EAF",
        description="Extract fan speed for configurable digital input 1 mode.\n0: Off\n1: Minimum\n2: Low\n3: Normal\n4: High\n5: Maximum",
        min_value=0,
        max_value=5,
    ),
    ModbusParameter(
        register=1173,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_CDI_2_AIRFLOW_LEVEL_SAF",
        description="Supply fan speed for configurable digital input 2 mode.\n0: Off\n1: Minimum\n2: Low\n3: Normal\n4: High\n5: Maximum",
        min_value=0,
        max_value=5,
    ),
    ModbusParameter(
        register=1174,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_CDI_2_AIRFLOW_LEVEL_EAF",
        description="Extract fan speed for configurable digital input 2 mode.\n0: Off\n1: Minimum\n2: Low\n3: Normal\n4: High\n5: Maximum",
        min_value=0,
        max_value=5,
    ),
    ModbusParameter(
        register=1175,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_CDI_3_AIRFLOW_LEVEL_SAF",
        description="Supply fan speed for configurable digital input 3 mode.\n0: Off\n1: Minimum\n2: Low\n3: Normal\n4: High\n5: Maximum",
        min_value=0,
        max_value=5,
    ),
    ModbusParameter(
        register=1176,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_CDI_3_AIRFLOW_LEVEL_EAF",
        description="Extract fan speed for configurable digital input 3 mode.\n0: Off\n1: Minimum\n2: Low\n3: Normal\n4: High\n5: Maximum",
        min_value=0,
        max_value=5,
    ),
    ModbusParameter(
        register=1177,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_PRESSURE_GUARD_AIRFLOW_LEVEL_SAF",
        description=(
            "Fan speed level for configurable pressure guard function.\n0: Off\n1: Minimum\n2: Low\n3: Normal\n4: High\n5: Maximum"
        ),
        min_value=0,
        max_value=5,
    ),
    ModbusParameter(
        register=1178,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_PRESSURE_GUARD_AIRFLOW_LEVEL_EAF",
        description=(
            "Fan speed level for configurable pressure guard function.\n0: Off\n1: Minimum\n2: Low\n3: Normal\n4: High\n5: Maximum"
        ),
        min_value=0,
        max_value=5,
    ),
    ModbusParameter(
        register=1181,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_HOLIDAY_DI_OFF_DELAY",
        description="Digital input time delay setting for user mode Holiday, days.",
        min_value=0,
        max_value=365,
    ),
    ModbusParameter(
        register=1182,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_AWAY_DI_OFF_DELAY",
        description="Digital input time delay setting for user mode Away, hours.",
        min_value=0,
        max_value=72,
    ),
    ModbusParameter(
        register=1183,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_FIRPLACE_DI_OFF_DELAY",
        description="Digital input time delay setting for user mode Fire Place, minutes.",
        min_value=0,
        max_value=60,
    ),
    ModbusParameter(
        register=1184,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_REFRESH_DI_OFF_DELAY",
        description="Digital input time delay setting for user mode Refresh, minutes.",
        min_value=0,
        max_value=240,
    ),
    ModbusParameter(
        register=1185,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_USERMODE_CROWDED_DI_OFF_DELAY",
        description="Digital input time delay setting for user mode Crowded, hours.",
        min_value=0,
        max_value=8,
    ),
    ModbusParameter(
        register=1186,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_CDI1_OFF_DELAY",
        description="Digital input time delay setting for user mode Configurable digital input 1, minutes.",
        min_value=0,
        max_value=240,
    ),
    ModbusParameter(
        register=1187,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_CDI2_OFF_DELAY",
        description="Digital input time delay setting for user mode Configurable digital input 2, minutes.",
        min_value=0,
        max_value=240,
    ),
    ModbusParameter(
        register=1188,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_CDI3_OFF_DELAY",
        description="Digital input time delay setting for user mode Configurable digital input 3, minutes.",
        min_value=0,
        max_value=240,
    ),
    # Fans
    ModbusParameter(
        register=1201,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_MANUAL_SAF",
        description="Supply air fan speed on manual mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1202,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_MANUAL_EAF",
        description="Extract air fan speed on manual mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1203,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_AUTO_SAF",
        description="Supply air fan speed on auto mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1204,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_AUTO_EAF",
        description="Extract air fan speed on auto mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1205,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_CROWDED_SAF",
        description="Supply air fan speed on crowded mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1206,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_CROWDED_EAF",
        description="Extract air fan speed on crowded mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1207,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_REFRESH_SAF",
        description="Supply air fan speed on refresh mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1208,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_REFRESH_EAF",
        description="Extract air fan speed on refresh mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1209,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_FIREPLACE_SAF",
        description="Supply air fan speed on fireplace mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1210,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_FIREPLACE_EAF",
        description="Extract air fan speed on fireplace mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1211,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_AWAY_SAF",
        description="Supply air fan speed on away mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1212,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_AWAY_EAF",
        description="Extract air fan speed on away mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1213,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_HOLIDAY_SAF",
        description="Supply air fan speed on holiday mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1214,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_HOLIDAY_EAF",
        description="Extract air fan speed on holiday mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1215,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_COOKERHOOD_SAF",
        description="Supply air fan speed on cookerhood mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1216,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_COOKERHOOD_EAF",
        description="Extract air fan speed on cookerhood mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1217,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_VACUUMCLEANER_SAF",
        description="Supply air fan speed on vacuum cleaner mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1218,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_VACUUMCLEANER_EAF",
        description="Extract air fan speed on vacuum cleaner mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1221,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_CDI1_SAF",
        description="Supply air fan speed on configurable digital input 1 mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1222,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_CDI1_EAF",
        description="Extract air fan speed on configurable digital input 1 mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1223,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_CDI2_SAF",
        description="Supply air fan speed on configurable digital input 2 mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1224,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_CDI2_EAF",
        description="Extract air fan speed on configurable digital input 2 mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1225,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_CDI3_SAF",
        description="Supply air fan speed on configurable digital input 3 mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1226,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_CDI3_EAF",
        description="Extract air fan speed on configurable digital input 3 mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1227,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_PRESSURE_GUARD_SAF",
        description="Supply air fan speed on pressure guard mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1228,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_PRESSURE_GUARD_EAF",
        description="Extract air fan speed on pressure guard mode expressed by selected fan control mode.",
        min_value=0,
        max_value=None,
    ),
    ModbusParameter(
        register=1251,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FAN_OUTDOOR_COMP_TYPE",
        description="Outdoor air compensation type: 0: Supply air fan only, 1: Both fans",
        min_value=0,
        max_value=1,
    ),
    ModbusParameter(
        register=1252,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FAN_OUTDOOR_COMP_VALUE_WINTER",
        description="Maximum fan speed decrease during winter.",
        min_value=0,
        max_value=50,
    ),
    ModbusParameter(
        register=1254,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FAN_OUTDOOR_COMP_STOP_T_WINTER",
        description="Temperature setting at which outdoor air compensation should stop at winter time.",
        min_value=150,
        max_value=65136,
    ),
    ModbusParameter(
        register=1255,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FAN_OUTDOOR_COMP_RESULT",
        description="Outdoor air compensation result. Value depends on contents of register 1274. Value can be %, RPM, Pressure or Flow.",
    ),
    ModbusParameter(
        register=1256,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FAN_OUTDOOR_COMP_START_T_WINTER",
        description="Temperature setting at which outdoor air compensation should start at winter time.",
        min_value=150,
        max_value=65136,
    ),
    ModbusParameter(
        register=1257,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FAN_OUTDOOR_COMP_START_T_SUMMER",
        description="Temperature setting at which outdoor air compensation should start at summer time.",
        min_value=150,
        max_value=500,
    ),
    ModbusParameter(
        register=1258,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FAN_OUTDOOR_COMP_STOP_T_SUMMER",
        description="Temperature setting at which outdoor air compensation should stop at summer time.",
        min_value=150,
        max_value=500,
    ),
    ModbusParameter(
        register=1259,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FAN_OUTDOOR_COMP_VALUE_SUMMER",
        description="Maximum fan speed decrease during summer.",
        min_value=0,
        max_value=50,
    ),
    ModbusParameter(
        register=1271,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FAN_REGULATION_PBAND",
        description="Fan control P-band value. Applies only if fan is controlled by pressure, flow or RPM.",
        min_value=1,
        max_value=3000,
    ),
    ModbusParameter(
        register=1272,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FAN_REGULATION_ITIME",
        description="Fan control I-time value. Applies only if fan is controlled by pressure, flow or RPM.",
        min_value=0,
        max_value=240,
    ),
    ModbusParameter(
        register=1274,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FAN_REGULATION_UNIT",
        description="Fan control type: 0: Manual, %, 1: Manual, RPM, 2: Pressure, 3: Flow, 4: External",
        min_value=0,
        max_value=4,
    ),
    ModbusParameter(
        register=1351,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SPEED_FANS_RUNNING",
        description="Fans operation status: 0: Fans not running, 1: Fans running",
        boolean=True,
    ),
    ModbusParameter(
        register=1353,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FAN_MANUAL_STOP_ALLOWED",
        description="Allow manual fan stop. 0: Manual stop not allowed, 1: Manual stop allowed",
        boolean=True,
    ),
    # Temperature control
    ModbusParameter(
        register=2001,
        sig=IntegerType.INT,
        reg_type=RegisterType.Holding,
        short="REG_TC_SP",
        description="Temperature setpoint for the supply air temperature",
        scale_factor=10,
        min_value=120,
        max_value=300,
    ),
    ModbusParameter(
        register=2011,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_TC_CASCADE_PBAND",
        description="Extract/room air temperature control P-band value.",
        min_value=10,
        max_value=600,
    ),
    ModbusParameter(
        register=2012,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_TC_CASCADE_ITIME",
        description="Extract/room air temperature control I-time value.",
        min_value=0,
        max_value=240,
    ),
    ModbusParameter(
        register=2021,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_TC_CASCADE_SP_MIN",
        description="Minimum temperature setpoint for supply air.",
    ),
    ModbusParameter(
        register=2022,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_TC_CASCADE_SP_MAX",
        description="Maximum temperature setpoint for supply air.",
    ),
    ModbusParameter(
        register=2031,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_TC_CONTROL_MODE",
        description="Temperature control mode: 0 - Supply air; 1 - Room air; 2 - Extract air",
    ),
    ModbusParameter(
        register=2041,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_TC_CONTROL_PBAND",
        description="Supply air temperature control P-band value.",
    ),
    ModbusParameter(
        register=2042,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_TC_CONTROL_ITIME",
        description="Supply air temperature control I-time value.",
    ),
    ModbusParameter(
        register=2054,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_TC_SP_SATC",
        description="Temperature setpoint for supply air temperature calculated for extract/room air temperature control mode.",
    ),
    ModbusParameter(
        register=2055,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SATC_HEAT_DEMAND",
        description="Overall heat demand, %.",
    ),
    # Cooler
    ModbusParameter(
        register=2113,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_HEATER_CIRC_PUMP_START_T",
        description="Temperature at which circulation pump for heating is started.",
        min_value=0,
        max_value=200,
    ),
    ModbusParameter(
        register=2114,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_HEATER_FROM_SATC",
        description="Heating demand by temperature control, %.",
        min_value=0,
        max_value=100,
    ),
    ModbusParameter(
        register=2122,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_HEATER_CIRC_PUMP_STOP_DELAY",
        description="Heating circulation pump stop delay time, min.",
        min_value=0,
        max_value=60,
    ),
    ModbusParameter(
        register=2124,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_HEATER_CIRC_PUMP_COUNTER",
        description="Time till heating circulation pump stops, s.",
        min_value=0,
        max_value=3600,
    ),
    ModbusParameter(
        register=2141,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_HEAT_EXCHANGER_FROM_SATC",
        description="Heat recovery demand by temperature control, %",
        min_value=0,
        max_value=100,
    ),
    ModbusParameter(
        register=2149,
        sig=IntegerType.INT,
        reg_type=RegisterType.Input,
        short="REG_PWM_TRIAC_OUTPUT",
        description="TRIAC after manual override",
        min_value=0,
        max_value=100,
    ),
    ModbusParameter(
        register=2201,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_ROTOR_RH_TRANSFER_CTRL_PBAND",
        description="Moisture transfer control P-band value.",
        min_value=1,
        max_value=1000,
    ),
    ModbusParameter(
        register=2202,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_ROTOR_RH_TRANSFER_CTRL_ITIME",
        description="Moisture transfer control I-time value, s.",
        min_value=0,
        max_value=120,
    ),
    ModbusParameter(
        register=2203,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_ROTOR_RH_TRANSFER_CTRL_SETPOINT",
        description="Moisture transfer control function setpoint.",
        min_value=1,
        max_value=100,
    ),
    ModbusParameter(
        register=2204,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_ROTOR_RH_TRANSFER_CTRL_ON_OFF",
        description="Moisture transfer control function status: 0 - Disabled; 1 - Enabled",
        boolean=True,
    ),
    ModbusParameter(
        register=2221,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ROTOR_CLEANING_DESIRED",
        description="Rotary heat exchanger cleaning function status: 0 - Inactive; 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=2263,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_PASSIVE_HOUSE_ACTIVATION",
        description="Passive house function status: 0 - Disabled; 1 - Enabled",
        boolean=True,
    ),
    ModbusParameter(
        register=2311,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_COOLER_FROM_SATC",
        description="Cooling demand by temperature control, %.",
        min_value=0,
        max_value=100,
    ),
    ModbusParameter(
        register=2315,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_COOLER_RECOVERY_LIMIT_T",
        description="Minimum temperature difference between extract and outside air temperatures to start cooling recovery function.",
        min_value=0,
        max_value=100,
    ),
    ModbusParameter(
        register=2316,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_COOLER_OAT_INTERLOCK_T",
        description="Outside air temperature value at which cooler operation is disabled.",
        min_value=0,
        max_value=200,
    ),
    ModbusParameter(
        register=2317,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_COOLER_CIRC_PUMP_STOP_DELAY",
        description="Cooling circulation pump stop delay time, min.",
        min_value=0,
        max_value=60,
    ),
    ModbusParameter(
        register=2318,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_COOLER_CIRC_PUMP_COUNTER",
        description="Time till cooling circulation pump stops, s.",
        min_value=0,
        max_value=3600,
    ),
    ModbusParameter(
        register=2401,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_EXTRA_CONTROLLER_SET_PI_PBAND",
        description="Extra controller P-band value.",
        min_value=10,
        max_value=600,
    ),
    ModbusParameter(
        register=2402,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_EXTRA_CONTROLLER_SET_PI_ITIME",
        description="Extra controller I-time value, s.",
        min_value=0,
        max_value=240,
    ),
    ModbusParameter(
        register=2403,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_EXTRA_CONTROLLER_SET_PI_SETPOINT",
        description="Extra controller temperature setpoint.",
        min_value=0,
        max_value=65536,
    ),
    ModbusParameter(
        register=2404,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_EXTRA_CONTROLLER_CIRC_PUMP_START_T",
        description="Temperature at which circulation pump for heating is started.",
        min_value=0,
        max_value=200,
    ),
    ModbusParameter(
        register=2405,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_EXTRA_CONTROLLER_CIRC_PUMP_STOP_DELAY",
        description="Extra controller circulation pump stop delay time, min.",
        min_value=0,
        max_value=60,
    ),
    ModbusParameter(
        register=2418,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_EXTRA_CONTROLLER_PREHEATER_SETPOINT_TYPE",
        description="Preheater setpoint type: 0 - Auto; 1 - Manual",
        min_value=0,
        max_value=1,
    ),
    ModbusParameter(
        register=2419,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_EXTRA_CONTROLLER_CIRC_PUMP_COUNTER",
        description="Time till extra controller circulation pump stops, s.",
        min_value=0,
        max_value=3600,
    ),
    ModbusParameter(
        register=2420,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_EXTRA_CONTROLLER_GEO_PRE_HEATER_SP",
        description="Winter temperature setpoint for GEO heat exchanger.",
        min_value=0,
        max_value=65536,
    ),
    ModbusParameter(
        register=2421,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_EXTRA_CONTROLLER_GEO_PRE_HEATER_ACTIVATION_T",
        description="Temperature at which GEO exchanger should be activated in winter mode.",
        min_value=0,
        max_value=65536,
    ),
    ModbusParameter(
        register=2422,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_EXTRA_CONTROLLER_GEO_PRE_COOLER_SP",
        description="Summer temperature setpoint for GEO heat exchanger.",
        min_value=100,
        max_value=300,
    ),
    ModbusParameter(
        register=2423,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_EXTRA_CONTROLLER_GEO_PRE_COOLER_ACTIVATION_T",
        description="Temperature at which GEO exchanger should be activated in summer mode.",
        min_value=150,
        max_value=300,
    ),
    ModbusParameter(
        register=2424,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_EXTRA_CONTROLLER_GEO_SUMMER_WINTER_CNTR_L",
        description="Time till summer mode will be activated for GEO heat exchanger, s.",
    ),
    ModbusParameter(
        register=2425,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_EXTRA_CONTROLLER_GEO_SUMMER_WINTER_CNTR_H",
        description="Time till summer mode will be activated for GEO heat exchanger, s.",
    ),
    ModbusParameter(
        register=2426,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_EXTRA_CONTROLLER_GEO_SUMMER_WINTER_MODE",
        description="Mode for GEO heat exchanger: 0 - None; 1 - Summer; 2 - Winter",
        min_value=0,
        max_value=2,
    ),
    ModbusParameter(
        register=2427,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_EXTRA_CONTROLLER_PREHEATER_DEACTIVATE_AT_HIGH_OAT",
        description="Preheater deactivation by outside air temperature status: 0 - Disabled; 1 - Enabled",
        boolean=True,
    ),
    ModbusParameter(
        register=2428,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_EXTRA_CONTROLLER_PREHEATER_ACTIVATION_T",
        description="Temperature at which preheater operation is allowed.",
        min_value=0,
        max_value=65536,
    ),
    ModbusParameter(
        register=2451,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_CHANGE_OVER_CIRC_PUMP_START_T",
        description="Temperature at which change over circulation pump is started.",
        min_value=0,
        max_value=200,
    ),
    ModbusParameter(
        register=2452,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_CHANGE_OVER_CIRC_PUMP_STOP_DELAY",
        description="Change over circulation pump stop delay time, min.",
        min_value=0,
        max_value=60,
    ),
    ModbusParameter(
        register=2453,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_CHANGE_OVER_CIRC_PUMP_COUNTER",
        description="Time till change over circulation pump stops, s.",
        min_value=0,
        max_value=3600,
    ),
    # ECO mode
    ModbusParameter(
        register=2504,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_ECO_T_Y1_OFFSET",
        description="Supply air temperature decrease during ECO mode.",
        min_value=0,
        max_value=100,
    ),
    ModbusParameter(
        register=2505,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_ECO_MODE_ON_OFF",
        description="Enabling of eco mode",
        boolean=True,
    ),
    ModbusParameter(
        register=2506,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ECO_FUNCTION_ACTIVE",
        description="ECO mode status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=2521,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ECO_MODE_ACTIVE",
        description="Operation mode of ECO mode: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    # Functions
    ModbusParameter(
        register=3002,
        sig=IntegerType.INT,
        reg_type=RegisterType.Input,
        short="REG_FUNCTION_ACTIVE_HEATER",
        description="Which type of heater is active",
        min_value=0,
        max_value=3,
    ),
    ModbusParameter(
        register=3014,
        sig=IntegerType.INT,
        reg_type=RegisterType.Input,
        short="REG_FUNCTION_ACTIVE_COOLER",
        description="Which type of cooler is active (0=None, 1=Water, 2=Change over)",
        min_value=0,
        max_value=2,
    ),
    ModbusParameter(
        register=3101,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FUNCTION_ACTIVE_COOLING",
        description="Cooling status: 0 - Inactive; 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=3102,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FUNCTION_ACTIVE_FREE_COOLING",
        description="Free cooling function status: 0 - Inactive; 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=3103,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FUNCTION_ACTIVE_HEATING",
        description="Heating status: 0 - Inactive; 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=3104,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FUNCTION_ACTIVE_DEFROSTING",
        description="Defrosting status: 0 - Inactive; 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=3105,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FUNCTION_ACTIVE_HEAT_RECOVERY",
        description="Heat recovery function status: 0 - Inactive; 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=3106,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FUNCTION_ACTIVE_COOLING_RECOVERY",
        description="Cooling recovery function status: 0 - Inactive; 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=3107,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FUNCTION_ACTIVE_MOISTURE_TRANSFER",
        description="Moisture transfer function status: 0 - Inactive; 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=3108,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FUNCTION_ACTIVE_SECONDARY_AIR",
        description="Secondary air function status: 0 - Inactive; 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=3109,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FUNCTION_ACTIVE_VACUUM_CLEANER",
        description="Vacuum cleaner function status: 0 - Inactive; 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=3110,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FUNCTION_ACTIVE_COOKER_HOOD",
        description="Cooker hood function status: 0 - Inactive; 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=3113,
        sig=IntegerType.INT,
        reg_type=RegisterType.Input,
        short="REG_FUNCTION_ACTIVE_HEATER_COOL_DOWN",
        description="Active Heater Cool Down",
        boolean=True,
    ),
    ModbusParameter(
        register=3114,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FUNCTION_ACTIVE_PRESSURE_GUARD",
        description="Pressure guard",
        boolean=True,
    ),
    ModbusParameter(
        register=3115,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FUNCTION_ACTIVE_CDI_1",
        description="Configurable DI1",
        boolean=True,
    ),
    ModbusParameter(
        register=3116,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FUNCTION_ACTIVE_CDI_2",
        description="Configurable DI2",
        boolean=True,
    ),
    ModbusParameter(
        register=3117,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FUNCTION_ACTIVE_CDI_3",
        description="Configurable DI3",
        boolean=True,
    ),
    # Free Cooling
    ModbusParameter(
        register=4001,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_DEFROSTING_MODE",
        description="Defrosting mode: 0 - Soft; 1 - Normal; 2 - Hard",
        min_value=0,
        max_value=2,
    ),
    ModbusParameter(
        register=4003,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_DEFROSTING_LEVEL",
        description="Defrosting level.",
        min_value=0,
        max_value=5,
    ),
    ModbusParameter(
        register=4011,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_DEFROSTING_STATE",
        description="Defrosting state: 0 - Normal; 1 - Bypass; 2 - Stop; 3 - Secondary air; 4 - Error",
        min_value=0,
        max_value=4,
    ),
    ModbusParameter(
        register=4012,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_DEFROSTING_COUNTER",
        description="Time in specific defrosting state, s.",
    ),
    ModbusParameter(
        register=4100,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FREE_COOLING_ON_OFF",
        description="Enabling of free cooling. 0 - Disabled; 1 - Enabled",
        boolean=True,
    ),
    ModbusParameter(
        register=4101,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FREE_COOLING_ON_OFF_DEPRECATED",
        description="Free cooling status: 0 - Disabled; 1 - Enabled",
        boolean=True,
    ),
    ModbusParameter(
        register=4103,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FREE_COOLING_OUTDOOR_NIGHT_TIME_DEACTIVATION_HIGH_T_LIMIT",
        description="Outdoor activation low limit.",
        min_value=70,
        max_value=300,
    ),
    ModbusParameter(
        register=4104,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FREE_COOLING_OUTDOOR_NIGHT_TIME_DEACTIVATION_LOW_T_LIMIT",
        description="Outdoor activation high limit.",
        min_value=70,
        max_value=300,
    ),
    ModbusParameter(
        register=4105,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FREE_COOLING_ROOM_CANCEL_T",
        description="Extract/Room cancel temperature.",
        min_value=120,
        max_value=300,
    ),
    ModbusParameter(
        register=4106,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FREE_COOLING_START_TIME_H",
        description="Free cooling start time, h.",
        min_value=21,
        max_value=8,
    ),
    ModbusParameter(
        register=4107,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FREE_COOLING_START_TIME_M",
        description="Free cooling start time, minutes.",
        min_value=0,
        max_value=59,
    ),
    ModbusParameter(
        register=4108,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FREE_COOLING_END_TIME_H",
        description="Free cooling end time, h.",
        min_value=None,
        max_value=8,
    ),
    ModbusParameter(
        register=4109,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FREE_COOLING_END_TIME_M",
        description="Free cooling end time, minutes.",
        min_value=0,
        max_value=59,
    ),
    ModbusParameter(
        register=4112,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FREE_COOLING_MIN_SPEED_LEVEL_SAF",
        description="Supply air fan speed during active free cooling function: 3: Normal, 4: High, 5: Maximum",
        min_value=3,
        max_value=5,
    ),
    ModbusParameter(
        register=4113,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FREE_COOLING_MIN_SPEED_LEVEL_EAF",
        description="Extract air fan speed during active free cooling function: 3: Normal, 4: High, 5: Maximum",
        min_value=3,
        max_value=5,
    ),
    ModbusParameter(
        register=4114,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FREE_COOLING_STATE",
        description="Free cooling state: 0 - Disabled; 1 - Enabled; 2 - Daytime; 3 - Temperatures are not reliable",
        min_value=0,
        max_value=3,
    ),
    ModbusParameter(
        register=4119,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FREE_COOLING_BLOCK_Y1_COUNTER",
        description="Time for heating block after free cooling.",
        min_value=0,
        max_value=3600,
    ),
    ModbusParameter(
        register=4120,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FREE_COOLING_RELIABLE_TEMPERATURES",
        description="Reliable temperature status: 0 - Not reliable; 1 - Reliable",
        boolean=True,
    ),
    # Filter replacement
    ModbusParameter(
        register=7001,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_FILTER_PERIOD",
        description="Filter replacement time in months.",
        min_value=3,
        max_value=15,
    ),
    ModbusParameter(
        register=7002,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FILTER_REPLACEMENT_TIME_L",
        description="Timestamp of latest filter replacement, lower 16 bits.",
        combine_with_32_bit=7003,
    ),
    ModbusParameter(
        register=7003,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FILTER_REPLACEMENT_TIME_H",
        description="Timestamp of latest filter replacement, higher 16 bits.",
        combine_with_32_bit=7002,
    ),
    ModbusParameter(
        register=7005,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FILTER_REMAINING_TIME_L",
        description="Remaining filter time in seconds, lower 16 bits",
        combine_with_32_bit=7006,
    ),
    ModbusParameter(
        register=7006,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_FILTER_REMAINING_TIME_H",
        description="Remaining filter time in seconds, higher 16 bits",
        combine_with_32_bit=7005,
    ),
    # Analog Input values (Temperatures, CO2, RH)
    ModbusParameter(
        register=12101,
        sig=IntegerType.INT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_FPT",
        description="Frost Protection Temperature sensor.",
        scale_factor=10,
    ),
    ModbusParameter(
        register=12102,
        sig=IntegerType.INT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_OAT",
        description="Outdoor Air Temperature sensor (standard)",
        scale_factor=10,
    ),
    ModbusParameter(
        register=12103,
        sig=IntegerType.INT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_SAT",
        description="Supply Air Temperature sensor (standard)",
        scale_factor=10,
    ),
    ModbusParameter(
        register=12104,
        sig=IntegerType.INT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_RAT",
        description="Room Air Temperature sensor.",
        scale_factor=10,
    ),
    ModbusParameter(
        register=12105,
        sig=IntegerType.INT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_EAT",
        description="Extract Air Temperature sensor (accessory)",
        scale_factor=10,
    ),
    ModbusParameter(
        register=12106,
        sig=IntegerType.INT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_ECT",
        description="Extra Controller Temperature sensor.",
        scale_factor=10,
    ),
    ModbusParameter(
        register=12107,
        sig=IntegerType.INT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_EFT",
        description="Efficiency Temperature sensor.",
        scale_factor=10,
    ),
    ModbusParameter(
        register=12108,
        sig=IntegerType.INT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_OHT",
        description="Overheat Temperature sensor (Electrical Heater)",
        scale_factor=10,
    ),
    ModbusParameter(
        register=12109,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_SENSOR_RHS",
        description="Relative Humidity Sensor (Accessory)",
        min_value=0,
        max_value=100,
    ),
    ModbusParameter(
        register=12110,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_BYS",
        description="Bypass damper input status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=12111,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_EMT",
        description="Emergency thermostat input status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=12112,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_RGS",
        description="Rotor guard sensor input status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=12113,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_SENSOR_MODBUS_CO2",
        description="Modbus register for CO2 sensor value input, ppm.",
        min_value=0,
        max_value=2000,
    ),
    ModbusParameter(
        register=12114,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_SENSOR_MODBUS_RHS",
        description="Modbus register for relative humidity sensor value input, %.",
        min_value=0,
        max_value=100,
    ),
    ModbusParameter(
        register=12136,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_RHS_PDM",
        description="PDM RHS sensor value (standard)",
        min_value=0,
        max_value=100,
    ),
    ModbusParameter(
        register=12301,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_DI_AWAY",
        description="Away mode input status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=12302,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_DI_HOLIDAY",
        description="Holiday mode input status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=12303,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_DI_FIREPLACE",
        description="Fireplace mode input status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=12304,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_DI_REHRESH",
        description="Refresh mode input status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=12305,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_DI_CROWDED",
        description="Crowded mode input status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=12306,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_DI_COOKERHOOD",
        description="Cooker hood",
        boolean=True,
    ),
    ModbusParameter(
        register=12307,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_DI_VACUUMCLEANER",
        description="Vacuum cleaner",
        boolean=True,
    ),
    ModbusParameter(
        register=12308,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_DI_EXTERNAL_STOP",
        description="External stop input status 0 - Inactive 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=12311,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_DI_FIRE_ALARM",
        description="Fire alarm input status 0 - Inactive 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=12312,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_DI_CHANGE_OVER_FEEDBACK",
        description="Change over feedback input status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=12313,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_DI_PRESSURE_GUARD",
        description="Pressure guard mode input status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=12314,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_DI_CDI_1",
        description="Configurable digital input 1 status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=12315,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_DI_CDI_2",
        description="Configurable digital input 2 status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=12316,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_DI_CDI_3",
        description="Configurable digital input 3 status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=12401,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_RPM_SAF",
        description="Supply Air Fan RPM indication from TACHO",
    ),
    ModbusParameter(
        register=12402,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_RPM_EAF",
        description="Extract Air Fan RPM indication from TACHO",
    ),
    ModbusParameter(
        register=12405,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_DI_BYF",
        description="Bypass damper feedback value, %.",
        min_value=0,
        max_value=100,
    ),
    ModbusParameter(
        register=12544,
        sig=IntegerType.INT,
        reg_type=RegisterType.Input,
        short="REG_SENSOR_PDM_EAT_VALUE",
        description="PDM EAT sensor value (standard)",
        scale_factor=10,
    ),
    # Output values
    ModbusParameter(
        register=14001,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_SAF",
        description="SAF fan speed",
        min_value=0,
        max_value=100,
    ),
    ModbusParameter(
        register=14002,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_EAF",
        description="EAF fan speed",
        min_value=0,
        max_value=100,
    ),
    ModbusParameter(
        register=14003,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_ALARM",
        description="Alarm output status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=14004,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_OUTDOOR_EXTRACT_DAMPER",
        description="Outdoor/exhaust damper output status: 0 - Closed, 1 - Open",
        boolean=True,
    ),
    ModbusParameter(
        register=14101,
        sig=IntegerType.INT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_Y1_ANALOG",
        description="Heater AO state",
        min_value=0,
        max_value=100,
    ),
    ModbusParameter(
        register=14102,
        sig=IntegerType.INT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_Y1_DIGITAL",
        description="Heater DO state:\n0: Output not active\n1: Output active",
        boolean=True,
    ),
    ModbusParameter(
        register=14103,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_Y2_ANALOG",
        description="Heat exchanger analog output value, %",
        min_value=0,
        max_value=100,
    ),
    ModbusParameter(
        register=14104,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_Y2_DIGITAL",
        description="Heat Exchanger DO state.0: Output not active1: Output active",
        boolean=True,
    ),
    ModbusParameter(
        register=14201,
        sig=IntegerType.INT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_Y3_ANALOG",
        description="Cooler AO state",
        min_value=0,
        max_value=100,
    ),
    ModbusParameter(
        register=14202,
        sig=IntegerType.INT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_Y3_DIGITAL",
        description="Cooler DO state:\n0: Output not active\n1: Output active",
        boolean=True,
    ),
    ModbusParameter(
        register=14203,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_Y4_ANALOG",
        description="Extra controller analog output value, %.",
        min_value=0,
        max_value=100,
    ),
    ModbusParameter(
        register=14204,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_Y4_DIGITAL",
        description="Extra controller digital output status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=14301,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_Y1_CIRC_PUMP",
        description="Heating circulation pump digital output status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=14302,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_Y3_CIRC_PUMP",
        description="Cooling circulation pump digital output status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=14303,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_Y1_Y3_CIRC_PUMP",
        description="Change over circulation pump digital output status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=14304,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_Y4_CIRC_PUMP",
        description="Extra controller circulation pump digital output status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=14305,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_Y3_ACTIVATE_COIL",
        description="Activate cooling digital output status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=14306,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_Y1_Y3_ANALOG",
        description="Change over analog output value, %.",
        min_value=0,
        max_value=100,
    ),
    ModbusParameter(
        register=14307,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_Y4_SECONDARY_AIR",
        description="Air recirculation digital output status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=14308,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_INTERLOCK_EXTERNAL_FAN_CONTROL",
        description="External fan control block digital output status: 0 - Unblocked, 1 - Blocked",
        boolean=True,
    ),
    ModbusParameter(
        register=14309,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_UNIT_STATUS_OK",
        description="Digital output for unit status: 0 - Active alarms detected, 1 - Unit status OK",
        boolean=True,
    ),
    ModbusParameter(
        register=14310,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_WS_RUNNING_UNSCHEDULED",
        description="Week schedule unscheduled period digital output status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=14311,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_WS_RUNNING_SCHEDULED",
        description="Week schedule scheduled period digital output status: 0 - Inactive, 1 - Active",
        boolean=True,
    ),
    ModbusParameter(
        register=14381,
        sig=IntegerType.INT,
        reg_type=RegisterType.Input,
        short="REG_OUTPUT_TRIAC",
        description="TRIAC control signal",
        boolean=True,
    ),
    # Alarms
    ModbusParameter(
        register=15016,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ALARM_FROST_PROT_ALARM",
        description="Frost protection",
        min_value=0,
        max_value=3,
    ),
    ModbusParameter(
        register=15023,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ALARM_DEFROSTING_ALARM",
        description="Defrosting",
        min_value=0,
        max_value=3,
    ),
    ModbusParameter(
        register=15030,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ALARM_SAF_RPM_ALARM",
        description="Supply air fan RPM",
        min_value=0,
        max_value=3,
    ),
    ModbusParameter(
        register=15037,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ALARM_EAF_RPM_ALARM",
        description="Extract air fan RPM",
        min_value=0,
        max_value=3,
    ),
    ModbusParameter(
        register=15072,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ALARM_SAT_ALARM",
        description="Supply air temperature",
        min_value=0,
        max_value=3,
    ),
    ModbusParameter(
        register=15086,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ALARM_EAT_ALARM",
        description="Extract air temperature",
        min_value=0,
        max_value=3,
    ),
    ModbusParameter(
        register=15121,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ALARM_RGS_ALARM",
        description="Rotation guard (RGS)",
        min_value=0,
        max_value=3,
    ),
    ModbusParameter(
        register=15142,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ALARM_FILTER_ALARM",
        description="Filter",
        min_value=0,
        max_value=3,
    ),
    ModbusParameter(
        register=15170,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ALARM_CO2_ALARM",
        description="CO2",
        min_value=0,
        max_value=3,
    ),
    ModbusParameter(
        register=15177,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ALARM_LOW_SAT_ALARM",
        description="Low supply air temperature",
        min_value=0,
        max_value=3,
    ),
    ModbusParameter(
        register=15530,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ALARM_OVERHEAT_TEMPERATURE_ALARM",
        description="Overheat temperature",
        min_value=0,
        max_value=3,
    ),
    ModbusParameter(
        register=15537,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ALARM_FIRE_ALARM_ALARM",
        description="Fire alarm",
        min_value=0,
        max_value=3,
    ),
    ModbusParameter(
        register=15544,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ALARM_FILTER_WARNING_ALARM",
        description="Filter warning",
        min_value=0,
        max_value=3,
    ),
    ModbusParameter(
        register=15901,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ALARM_TYPE_A",
        description="Indicates if an alarm Type A is active",
        boolean=True,
    ),
    ModbusParameter(
        register=15902,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ALARM_TYPE_B",
        description="Indicates if an alarm Type B is active",
        boolean=True,
    ),
    ModbusParameter(
        register=15903,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ALARM_TYPE_C",
        description="Indicates if an alarm Type C is active",
        boolean=True,
    ),
    ModbusParameter(
        register=15905,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_ALARM_CLEAR_ALL",
        description="Clears all active alarms: 1: Clear all active alarms",
        min_value=0,
        max_value=1,
    ),
    ModbusParameter(
        register=15906,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ALARM_AMOUNT_ACTIVE",
        description="Number of active alarms.",
        min_value=0,
        max_value=65536,
    ),
    ModbusParameter(
        register=15907,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Input,
        short="REG_ALARM_MODBUS_SUM",
        description="Any alarm indication: 0 - Not supported, 1 - No active alarms, 2 - Active alarm",
        min_value=0,
        max_value=2,
    ),
    ModbusParameter(
        register=15910,
        sig=IntegerType.UINT,
        reg_type=RegisterType.Holding,
        short="REG_ALARM_LOW_SAT_ENABLED",
        description="Low supply air temperature alarm monitoring status: 0 - Not monitored, 1 - Alarm conditions monitored.",
        boolean=True,
    ),
]


parameter_map = {param.short: param for param in parameters_list}

operation_parameters = {
    short: parameter_map[short]
    for short in [
        "REG_TC_SP",
        "REG_USERMODE_MANUAL_AIRFLOW_LEVEL_SAF",
        "REG_USERMODE_MODE",
        "REG_ECO_MODE_ON_OFF",
        "REG_SENSOR_RPM_SAF",
        "REG_SENSOR_RPM_EAF",
        "REG_OUTPUT_SAF",
        "REG_OUTPUT_EAF",
        "REG_SPEED_FANS_RUNNING",
    ]
}

sensor_parameters = {
    short: parameter_map[short]
    for short in [
        "REG_SENSOR_RHS_PDM",
        "REG_SENSOR_OAT",
        "REG_SENSOR_SAT",
        "REG_SENSOR_PDM_EAT_VALUE",
        "REG_SENSOR_OHT",
        "REG_DEMC_RH_HIGHEST",
        "REG_DEMC_CO2_HIGHEST",
        "REG_IAQ_LEVEL",
    ]
}

config_parameters = {
    short: parameter_map[short]
    for short in [
        "REG_FILTER_REMAINING_TIME_L",
        "REG_FILTER_REMAINING_TIME_H",
        "REG_FREE_COOLING_ON_OFF",
        "REG_USERMODE_CROWDED_AIRFLOW_LEVEL_SAF",
        "REG_USERMODE_REFRESH_AIRFLOW_LEVEL_SAF",
        "REG_USERMODE_FIREPLACE_AIRFLOW_LEVEL_SAF",
        "REG_USERMODE_AWAY_AIRFLOW_LEVEL_SAF",
        "REG_USERMODE_HOLIDAY_AIRFLOW_LEVEL_SAF",
        "REG_USERMODE_COOKERHOOD_AIRFLOW_LEVEL_SAF",
        "REG_USERMODE_VACUUMCLEANER_AIRFLOW_LEVEL_SAF",
        "REG_PRESSURE_GUARD_AIRFLOW_LEVEL_SAF",
        "REG_FAN_MANUAL_STOP_ALLOWED",
    ]
}

alarm_parameters = {
    short: parameter_map[short]
    for short in [
        "REG_ALARM_FROST_PROT_ALARM",
        "REG_ALARM_DEFROSTING_ALARM",
        "REG_ALARM_SAF_RPM_ALARM",
        "REG_ALARM_EAF_RPM_ALARM",
        "REG_ALARM_SAT_ALARM",
        "REG_ALARM_EAT_ALARM",
        "REG_ALARM_RGS_ALARM",
        "REG_ALARM_FILTER_ALARM",
        "REG_ALARM_CO2_ALARM",
        "REG_ALARM_LOW_SAT_ALARM",
        "REG_ALARM_OVERHEAT_TEMPERATURE_ALARM",
        "REG_ALARM_FIRE_ALARM_ALARM",
        "REG_ALARM_FILTER_WARNING_ALARM",
        "REG_ALARM_TYPE_A",
        "REG_ALARM_TYPE_B",
        "REG_ALARM_TYPE_C",
    ]
}

function_parameters = {
    short: parameter_map[short]
    for short in [
        "REG_FUNCTION_ACTIVE_PRESSURE_GUARD",
        "REG_SENSOR_DI_COOKERHOOD",
        "REG_SENSOR_DI_VACUUMCLEANER",
        "REG_FUNCTION_ACTIVE_HEATER_COOL_DOWN",
        "REG_FUNCTION_ACTIVE_CDI_1",
        "REG_FUNCTION_ACTIVE_CDI_2",
        "REG_FUNCTION_ACTIVE_CDI_3",
        "REG_ECO_FUNCTION_ACTIVE",
        "REG_FUNCTION_ACTIVE_FREE_COOLING",
        "REG_FUNCTION_ACTIVE_COOLING_RECOVERY",
        "REG_FUNCTION_ACTIVE_HEAT_RECOVERY",
        "REG_FUNCTION_ACTIVE_HEATING",
        "REG_FUNCTION_ACTIVE_COOLING",
    ]
}
